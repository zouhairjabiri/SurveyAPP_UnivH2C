{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\zouhair\\\\works\\\\Desktop\\\\Les Projets\\\\APP2 covid\\\\TeleCovid_SurveyApp-Frontend\\\\node_modules\\\\react-native-indicators\\\\src\\\\components\\\\ball-indicator\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Indicator from \"../indicator\";\nimport styles from \"./styles\";\n\nvar BallIndicator = function (_PureComponent) {\n  _inherits(BallIndicator, _PureComponent);\n\n  var _super = _createSuper(BallIndicator);\n\n  function BallIndicator(props) {\n    var _this;\n\n    _classCallCheck(this, BallIndicator);\n\n    _this = _super.call(this, props);\n    _this.renderComponent = _this.renderComponent.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(BallIndicator, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var index = _ref.index,\n          count = _ref.count,\n          progress = _ref.progress;\n      var _this$props = this.props,\n          size = _this$props.size,\n          backgroundColor = _this$props.color;\n      var angle = index * 360 / count;\n      var layerStyle = {\n        transform: [{\n          rotate: angle + 'deg'\n        }]\n      };\n      var inputRange = Array.from(new Array(count + 1), function (item, index) {\n        return index / count;\n      });\n      var outputRange = Array.from(new Array(count), function (item, index) {\n        return 1.2 - 0.5 * index / (count - 1);\n      });\n\n      for (var j = 0; j < index; j++) {\n        outputRange.unshift(outputRange.pop());\n      }\n\n      outputRange.unshift.apply(outputRange, _toConsumableArray(outputRange.slice(-1)));\n      var ballStyle = {\n        margin: size / 20,\n        backgroundColor: backgroundColor,\n        width: size / 5,\n        height: size / 5,\n        borderRadius: size / 10,\n        transform: [{\n          scale: progress.interpolate({\n            inputRange: inputRange,\n            outputRange: outputRange\n          })\n        }]\n      };\n      return React.createElement(Animated.View, _extends({\n        style: [styles.layer, layerStyle]\n      }, {\n        key: index\n      }, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }\n      }), React.createElement(Animated.View, {\n        style: ballStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          style = _this$props2.style,\n          width = _this$props2.size,\n          height = _this$props2.size,\n          props = _objectWithoutProperties(_this$props2, [\"style\", \"size\", \"size\"]);\n\n      return React.createElement(View, {\n        style: [styles.container, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 7\n        }\n      }, React.createElement(Indicator, _extends({\n        style: {\n          width: width,\n          height: height\n        },\n        renderComponent: this.renderComponent\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }\n      })));\n    }\n  }]);\n\n  return BallIndicator;\n}(PureComponent);\n\nBallIndicator.defaultProps = {\n  color: 'rgb(0, 0, 0)',\n  count: 8,\n  size: 40\n};\nBallIndicator.propTypes = _objectSpread(_objectSpread({}, Indicator.propTypes), {}, {\n  color: PropTypes.string,\n  size: PropTypes.number\n});\nexport { BallIndicator as default };","map":{"version":3,"sources":["C:/Users/zouhair/works/Desktop/Les Projets/APP2 covid/TeleCovid_SurveyApp-Frontend/node_modules/react-native-indicators/src/components/ball-indicator/index.js"],"names":["PropTypes","React","PureComponent","Indicator","styles","BallIndicator","props","renderComponent","bind","index","count","progress","size","backgroundColor","color","angle","layerStyle","transform","rotate","inputRange","Array","from","item","outputRange","j","unshift","pop","slice","ballStyle","margin","width","height","borderRadius","scale","interpolate","layer","key","style","container","defaultProps","propTypes","string","number"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { View, Animated } from 'react-native';\n\nimport Indicator from '../indicator';\nimport styles from './styles';\n\nexport default class BallIndicator extends PureComponent {\n  static defaultProps = {\n    color: 'rgb(0, 0, 0)',\n    count: 8,\n    size: 40,\n  };\n\n  static propTypes = {\n    ...Indicator.propTypes,\n\n    color: PropTypes.string,\n    size: PropTypes.number,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.renderComponent = this.renderComponent.bind(this);\n  }\n\n  renderComponent({ index, count, progress }) {\n    let { size, color: backgroundColor } = this.props;\n    let angle = index * 360 / count;\n\n    let layerStyle = {\n      transform: [{\n        rotate: angle + 'deg',\n      }],\n    };\n\n    let inputRange = Array\n      .from(new Array(count + 1), (item, index) => (\n        index / count\n      ));\n\n    let outputRange = Array\n      .from(new Array(count), (item, index) => (\n        1.2 - 0.5 * index / (count - 1)\n      ));\n\n    for (let j = 0; j < index; j++) {\n      outputRange.unshift(outputRange.pop());\n    }\n\n    outputRange.unshift(...outputRange.slice(-1));\n\n    let ballStyle = {\n      margin: size / 20,\n      backgroundColor,\n      width: size / 5,\n      height: size / 5,\n      borderRadius: size / 10,\n      transform: [{\n        scale: progress\n          .interpolate({ inputRange, outputRange }),\n      }],\n    };\n\n    return (\n      <Animated.View style={[styles.layer, layerStyle]} {...{ key: index }}>\n        <Animated.View style={ballStyle} />\n      </Animated.View>\n    );\n  }\n\n  render() {\n    let { style, size: width, size: height, ...props } = this.props;\n\n    return (\n      <View style={[styles.container, style]}>\n        <Indicator\n          style={{ width, height }}\n          renderComponent={this.renderComponent}\n          {...props}\n        />\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}