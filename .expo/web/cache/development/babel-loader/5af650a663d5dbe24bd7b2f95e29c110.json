{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\zouhair\\\\works\\\\Desktop\\\\Les Projets\\\\APP2 covid\\\\TeleCovid_SurveyApp-Frontend\\\\node_modules\\\\react-native-indicators\\\\src\\\\components\\\\dot-indicator\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Indicator from \"../indicator\";\nimport styles from \"./styles\";\n\nvar DotIndicator = function (_PureComponent) {\n  _inherits(DotIndicator, _PureComponent);\n\n  var _super = _createSuper(DotIndicator);\n\n  function DotIndicator(props) {\n    var _this;\n\n    _classCallCheck(this, DotIndicator);\n\n    _this = _super.call(this, props);\n    _this.renderComponent = _this.renderComponent.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DotIndicator, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var index = _ref.index,\n          count = _ref.count,\n          progress = _ref.progress;\n      var _this$props = this.props,\n          size = _this$props.size,\n          backgroundColor = _this$props.color;\n      var style = {\n        width: size,\n        height: size,\n        margin: size / 2,\n        borderRadius: size / 2,\n        backgroundColor: backgroundColor,\n        transform: [{\n          scale: progress.interpolate({\n            inputRange: [0.0, (index + 0.5) / (count + 1), (index + 1.0) / (count + 1), (index + 1.5) / (count + 1), 1.0],\n            outputRange: [1.0, 1.36, 1.56, 1.06, 1.0]\n          })\n        }]\n      };\n      return React.createElement(Animated.View, _extends({\n        style: style\n      }, {\n        key: index\n      }, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 7\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          style = _this$props2.style,\n          props = _objectWithoutProperties(_this$props2, [\"style\"]);\n\n      return React.createElement(Indicator, _extends({\n        style: [styles.container, style],\n        renderComponent: this.renderComponent\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return DotIndicator;\n}(PureComponent);\n\nDotIndicator.defaultProps = {\n  animationEasing: Easing.inOut(Easing.ease),\n  color: 'rgb(0, 0, 0)',\n  count: 4,\n  size: 16\n};\nDotIndicator.propTypes = _objectSpread(_objectSpread({}, Indicator.propTypes), {}, {\n  color: PropTypes.string,\n  size: PropTypes.number\n});\nexport { DotIndicator as default };","map":{"version":3,"sources":["C:/Users/zouhair/works/Desktop/Les Projets/APP2 covid/TeleCovid_SurveyApp-Frontend/node_modules/react-native-indicators/src/components/dot-indicator/index.js"],"names":["PropTypes","React","PureComponent","Indicator","styles","DotIndicator","props","renderComponent","bind","index","count","progress","size","backgroundColor","color","style","width","height","margin","borderRadius","transform","scale","interpolate","inputRange","outputRange","key","container","defaultProps","animationEasing","Easing","inOut","ease","propTypes","string","number"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;;;AAGA,OAAOC,SAAP;AACA,OAAOC,MAAP;;IAEqBC,Y;;;;;AAgBnB,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AAEA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBC,IAArB,+BAAvB;AAHiB;AAIlB;;;;0CAE2C;AAAA,UAA1BC,KAA0B,QAA1BA,KAA0B;AAAA,UAAnBC,KAAmB,QAAnBA,KAAmB;AAAA,UAAZC,QAAY,QAAZA,QAAY;AAAA,wBACH,KAAKL,KADF;AAAA,UACpCM,IADoC,eACpCA,IADoC;AAAA,UACvBC,eADuB,eAC9BC,KAD8B;AAG1C,UAAIC,KAAK,GAAG;AACVC,QAAAA,KAAK,EAAEJ,IADG;AAEVK,QAAAA,MAAM,EAAEL,IAFE;AAGVM,QAAAA,MAAM,EAAEN,IAAI,GAAG,CAHL;AAIVO,QAAAA,YAAY,EAAEP,IAAI,GAAG,CAJX;AAKVC,QAAAA,eAAe,EAAfA,eALU;AAMVO,QAAAA,SAAS,EAAE,CAAC;AACVC,UAAAA,KAAK,EAAEV,QAAQ,CAACW,WAAT,CAAqB;AAC1BC,YAAAA,UAAU,EAAE,CACV,GADU,EAEV,CAACd,KAAK,GAAG,GAAT,KAAiBC,KAAK,GAAG,CAAzB,CAFU,EAGV,CAACD,KAAK,GAAG,GAAT,KAAiBC,KAAK,GAAG,CAAzB,CAHU,EAIV,CAACD,KAAK,GAAG,GAAT,KAAiBC,KAAK,GAAG,CAAzB,CAJU,EAKV,GALU,CADc;AAQ1Bc,YAAAA,WAAW,EAAE,CACX,GADW,EAEX,IAFW,EAGX,IAHW,EAIX,IAJW,EAKX,GALW;AARa,WAArB;AADG,SAAD;AAND,OAAZ;AA0BA,aACE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAET;AAAtB,SAAiC;AAAEU,QAAAA,GAAG,EAAEhB;AAAP,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAGD;;;6BAEQ;AAAA,yBACmB,KAAKH,KADxB;AAAA,UACDS,KADC,gBACDA,KADC;AAAA,UACST,KADT;;AAGP,aACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAE,CAACF,MAAM,CAACsB,SAAR,EAAmBX,KAAnB,CADT;AAEE,QAAA,eAAe,EAAE,KAAKR;AAFxB,SAGMD,KAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAOD;;;;EAlEuCJ,a;;AAArBG,Y,CACZsB,Y,GAAe;AACpBC,EAAAA,eAAe,EAAEC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACE,IAApB,CADG;AAGpBjB,EAAAA,KAAK,EAAE,cAHa;AAIpBJ,EAAAA,KAAK,EAAE,CAJa;AAKpBE,EAAAA,IAAI,EAAE;AALc,C;AADHP,Y,CASZ2B,S,mCACF7B,SAAS,CAAC6B,S;AAEblB,EAAAA,KAAK,EAAEd,SAAS,CAACiC,M;AACjBrB,EAAAA,IAAI,EAAEZ,SAAS,CAACkC;;SAbC7B,Y","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { Animated, Easing } from 'react-native';\n\nimport Indicator from '../indicator';\nimport styles from './styles';\n\nexport default class DotIndicator extends PureComponent {\n  static defaultProps = {\n    animationEasing: Easing.inOut(Easing.ease),\n\n    color: 'rgb(0, 0, 0)',\n    count: 4,\n    size: 16,\n  };\n\n  static propTypes = {\n    ...Indicator.propTypes,\n\n    color: PropTypes.string,\n    size: PropTypes.number,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.renderComponent = this.renderComponent.bind(this);\n  }\n\n  renderComponent({ index, count, progress }) {\n    let { size, color: backgroundColor } = this.props;\n\n    let style = {\n      width: size,\n      height: size,\n      margin: size / 2,\n      borderRadius: size / 2,\n      backgroundColor,\n      transform: [{\n        scale: progress.interpolate({\n          inputRange: [\n            0.0,\n            (index + 0.5) / (count + 1),\n            (index + 1.0) / (count + 1),\n            (index + 1.5) / (count + 1),\n            1.0,\n          ],\n          outputRange: [\n            1.0,\n            1.36,\n            1.56,\n            1.06,\n            1.0,\n          ],\n        }),\n      }],\n    };\n\n    return (\n      <Animated.View style={style} {...{ key: index }} />\n    );\n  }\n\n  render() {\n    let { style, ...props } = this.props;\n\n    return (\n      <Indicator\n        style={[styles.container, style]}\n        renderComponent={this.renderComponent}\n        {...props}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}