{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\zouhair\\\\works\\\\Desktop\\\\Les Projets\\\\APP2 covid\\\\TeleCovid_SurveyApp-Frontend\\\\node_modules\\\\react-native-indicators\\\\src\\\\components\\\\wave-indicator\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Indicator from \"../indicator\";\nimport styles from \"./styles\";\nvar floatEpsilon = Math.pow(2, -23);\n\nvar WaveIndicator = function (_PureComponent) {\n  _inherits(WaveIndicator, _PureComponent);\n\n  var _super = _createSuper(WaveIndicator);\n\n  function WaveIndicator(props) {\n    var _this;\n\n    _classCallCheck(this, WaveIndicator);\n\n    _this = _super.call(this, props);\n    _this.renderComponent = _this.renderComponent.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(WaveIndicator, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var _waveStyle;\n\n      var index = _ref.index,\n          count = _ref.count,\n          progress = _ref.progress;\n      var _this$props = this.props,\n          size = _this$props.size,\n          color = _this$props.color,\n          waveFactor = _this$props.waveFactor,\n          waveMode = _this$props.waveMode;\n      var fill = 'fill' === waveMode;\n      var factor = Math.max(1 - Math.pow(waveFactor, index), floatEpsilon);\n      var waveStyle = (_waveStyle = {\n        height: size,\n        width: size,\n        borderRadius: size / 2,\n        borderWidth: fill ? 0 : Math.floor(size / 20)\n      }, _defineProperty(_waveStyle, fill ? 'backgroundColor' : 'borderColor', color), _defineProperty(_waveStyle, \"transform\", [{\n        scale: progress.interpolate({\n          inputRange: [factor, 1],\n          outputRange: [0, 1],\n          extrapolate: 'clamp'\n        })\n      }]), _defineProperty(_waveStyle, \"opacity\", progress.interpolate({\n        inputRange: [0, factor, 1],\n        outputRange: [0, 1, 0]\n      })), _waveStyle);\n      return React.createElement(Animated.View, _extends({\n        style: styles.layer\n      }, {\n        key: index\n      }, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }\n      }), React.createElement(Animated.View, {\n        style: waveStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          style = _this$props2.style,\n          width = _this$props2.size,\n          height = _this$props2.size,\n          props = _objectWithoutProperties(_this$props2, [\"style\", \"size\", \"size\"]);\n\n      return React.createElement(View, {\n        style: [styles.container, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 7\n        }\n      }, React.createElement(Indicator, _extends({\n        style: {\n          width: width,\n          height: height\n        },\n        renderComponent: this.renderComponent\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }\n      })));\n    }\n  }]);\n\n  return WaveIndicator;\n}(PureComponent);\n\nWaveIndicator.defaultProps = {\n  animationEasing: Easing.out(Easing.ease),\n  animationDuration: 1600,\n  waveFactor: 0.54,\n  waveMode: 'fill',\n  color: 'rgb(0, 0, 0)',\n  count: 4,\n  size: 40\n};\nWaveIndicator.propTypes = _objectSpread(_objectSpread({}, Indicator.propTypes), {}, {\n  waveFactor: PropTypes.number,\n  waveMode: PropTypes.oneOf(['fill', 'outline']),\n  color: PropTypes.string,\n  size: PropTypes.number\n});\nexport { WaveIndicator as default };","map":{"version":3,"sources":["C:/Users/zouhair/works/Desktop/Les Projets/APP2 covid/TeleCovid_SurveyApp-Frontend/node_modules/react-native-indicators/src/components/wave-indicator/index.js"],"names":["PropTypes","React","PureComponent","Indicator","styles","floatEpsilon","Math","pow","WaveIndicator","props","renderComponent","bind","index","count","progress","size","color","waveFactor","waveMode","fill","factor","max","waveStyle","height","width","borderRadius","borderWidth","floor","scale","interpolate","inputRange","outputRange","extrapolate","layer","key","style","container","defaultProps","animationEasing","Easing","out","ease","animationDuration","propTypes","number","oneOf","string"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { View, Animated, Easing } from 'react-native';\n\nimport Indicator from '../indicator';\nimport styles from './styles';\n\nconst floatEpsilon = Math.pow(2, -23);\n\nexport default class WaveIndicator extends PureComponent {\n  static defaultProps = {\n    animationEasing: Easing.out(Easing.ease),\n    animationDuration: 1600,\n\n    waveFactor: 0.54,\n    waveMode: 'fill',\n\n    color: 'rgb(0, 0, 0)',\n    count: 4,\n    size: 40,\n  };\n\n  static propTypes = {\n    ...Indicator.propTypes,\n\n    waveFactor: PropTypes.number,\n    waveMode: PropTypes.oneOf(['fill', 'outline']),\n\n    color: PropTypes.string,\n    size: PropTypes.number,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.renderComponent = this.renderComponent.bind(this);\n  }\n\n  renderComponent({ index, count, progress }) {\n    let { size, color, waveFactor, waveMode } = this.props;\n    let fill = 'fill' === waveMode;\n\n    let factor = Math.max(1 - Math.pow(waveFactor, index), floatEpsilon);\n\n    let waveStyle = {\n      height: size,\n      width: size,\n      borderRadius: size / 2,\n      borderWidth: fill? 0 : Math.floor(size / 20),\n      [fill? 'backgroundColor' : 'borderColor']: color,\n\n      transform: [{\n        scale: progress.interpolate({\n          inputRange: [factor, 1],\n          outputRange: [0, 1],\n          extrapolate: 'clamp',\n        }),\n      }],\n\n      opacity: progress.interpolate({\n        inputRange: [0, factor, 1],\n        outputRange: [0, 1, 0],\n      }),\n    };\n\n    return (\n      <Animated.View style={styles.layer} {...{ key: index }}>\n        <Animated.View style={waveStyle} />\n      </Animated.View>\n    );\n  }\n\n  render() {\n    let { style, size: width, size: height, ...props } = this.props;\n\n    return (\n      <View style={[styles.container, style]}>\n        <Indicator\n          style={{ width, height }}\n          renderComponent={this.renderComponent}\n          {...props}\n        />\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}