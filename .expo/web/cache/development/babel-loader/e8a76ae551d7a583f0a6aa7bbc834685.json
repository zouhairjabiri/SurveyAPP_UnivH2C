{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\zouhair\\\\works\\\\Desktop\\\\Les Projets\\\\APP2 covid\\\\TeleCovid_SurveyApp-Frontend\\\\node_modules\\\\react-native-indicators\\\\src\\\\components\\\\bar-indicator\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Indicator from \"../indicator\";\nimport styles from \"./styles\";\n\nvar BarIndicator = function (_PureComponent) {\n  _inherits(BarIndicator, _PureComponent);\n\n  var _super = _createSuper(BarIndicator);\n\n  function BarIndicator(props) {\n    var _this;\n\n    _classCallCheck(this, BarIndicator);\n\n    _this = _super.call(this, props);\n    _this.renderComponent = _this.renderComponent.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(BarIndicator, [{\n    key: \"outputRange\",\n    value: function outputRange(base, index, count, samples) {\n      var range = Array.from(new Array(samples), function (item, index) {\n        return base * Math.abs(Math.cos(Math.PI * index / (samples - 1)));\n      });\n\n      for (var j = 0; j < index * (samples / count); j++) {\n        range.unshift(range.pop());\n      }\n\n      range.unshift.apply(range, _toConsumableArray(range.slice(-1)));\n      return range;\n    }\n  }, {\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var index = _ref.index,\n          count = _ref.count,\n          progress = _ref.progress;\n      var _this$props = this.props,\n          backgroundColor = _this$props.color,\n          size = _this$props.size,\n          animationDuration = _this$props.animationDuration;\n      var frames = 60 * animationDuration / 1000;\n      var samples = 0;\n\n      do {\n        samples += count;\n      } while (samples < frames);\n\n      var inputRange = Array.from(new Array(samples + 1), function (item, index) {\n        return index / samples;\n      });\n      var width = Math.floor(size / 5),\n          height = Math.floor(size / 2),\n          radius = Math.ceil(width / 2);\n      var containerStyle = {\n        height: size,\n        width: width,\n        marginHorizontal: radius\n      };\n      var topStyle = {\n        width: width,\n        height: height,\n        backgroundColor: backgroundColor,\n        borderTopLeftRadius: radius,\n        borderTopRightRadius: radius,\n        transform: [{\n          translateY: progress.interpolate({\n            inputRange: inputRange,\n            outputRange: this.outputRange(+(height - radius) / 2, index, count, samples)\n          })\n        }]\n      };\n      var bottomStyle = {\n        width: width,\n        height: height,\n        backgroundColor: backgroundColor,\n        borderBottomLeftRadius: radius,\n        borderBottomRightRadius: radius,\n        transform: [{\n          translateY: progress.interpolate({\n            inputRange: inputRange,\n            outputRange: this.outputRange(-(height - radius) / 2, index, count, samples)\n          })\n        }]\n      };\n      return React.createElement(View, _extends({\n        style: containerStyle\n      }, {\n        key: index\n      }, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 7\n        }\n      }), React.createElement(Animated.View, {\n        style: topStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }\n      }), React.createElement(Animated.View, {\n        style: bottomStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          style = _this$props2.style,\n          props = _objectWithoutProperties(_this$props2, [\"style\"]);\n\n      return React.createElement(Indicator, _extends({\n        style: [styles.container, style],\n        renderComponent: this.renderComponent\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return BarIndicator;\n}(PureComponent);\n\nBarIndicator.defaultProps = {\n  count: 3,\n  color: 'rgb(0, 0, 0)',\n  size: 40\n};\nBarIndicator.propTypes = _objectSpread(_objectSpread({}, Indicator.propTypes), {}, {\n  color: PropTypes.string,\n  size: PropTypes.number\n});\nexport { BarIndicator as default };","map":{"version":3,"sources":["C:/Users/zouhair/works/Desktop/Les Projets/APP2 covid/TeleCovid_SurveyApp-Frontend/node_modules/react-native-indicators/src/components/bar-indicator/index.js"],"names":["PropTypes","React","PureComponent","Indicator","styles","BarIndicator","props","renderComponent","bind","base","index","count","samples","range","Array","from","item","Math","abs","cos","PI","j","unshift","pop","slice","progress","backgroundColor","color","size","animationDuration","frames","inputRange","width","floor","height","radius","ceil","containerStyle","marginHorizontal","topStyle","borderTopLeftRadius","borderTopRightRadius","transform","translateY","interpolate","outputRange","bottomStyle","borderBottomLeftRadius","borderBottomRightRadius","key","style","container","defaultProps","propTypes","string","number"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { View, Animated } from 'react-native';\n\nimport Indicator from '../indicator';\nimport styles from './styles';\n\nexport default class BarIndicator extends PureComponent {\n  static defaultProps = {\n    count: 3,\n\n    color: 'rgb(0, 0, 0)',\n    size: 40,\n  };\n\n  static propTypes = {\n    ...Indicator.propTypes,\n\n    color: PropTypes.string,\n    size: PropTypes.number,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.renderComponent = this.renderComponent.bind(this);\n  }\n\n  outputRange(base, index, count, samples) {\n    let range = Array\n      .from(new Array(samples), (item, index) => (\n        base * Math.abs(Math.cos(Math.PI * index / (samples - 1)))\n      ));\n\n    for (let j = 0; j < index * (samples / count); j++) {\n      range.unshift(range.pop());\n    }\n\n    range.unshift(...range.slice(-1));\n\n    return range;\n  }\n\n  renderComponent({ index, count, progress }) {\n    let { color: backgroundColor, size, animationDuration } = this.props;\n\n    let frames = 60 * animationDuration / 1000;\n    let samples = 0;\n\n    do\n      samples += count;\n    while (samples < frames);\n\n    let inputRange = Array\n      .from(new Array(samples + 1), (item, index) => index / samples);\n\n    let\n      width  = Math.floor(size / 5),\n      height = Math.floor(size / 2),\n      radius = Math.ceil(width / 2);\n\n    let containerStyle = {\n      height: size,\n      width: width,\n      marginHorizontal: radius,\n    };\n\n    let topStyle = {\n      width,\n      height,\n      backgroundColor,\n      borderTopLeftRadius: radius,\n      borderTopRightRadius: radius,\n      transform: [{\n        translateY: progress.interpolate({\n          inputRange,\n          outputRange: this.outputRange(+(height - radius) / 2, index, count, samples),\n        }),\n      }],\n    };\n\n    let bottomStyle = {\n      width,\n      height,\n      backgroundColor,\n      borderBottomLeftRadius: radius,\n      borderBottomRightRadius: radius,\n      transform: [{\n        translateY: progress.interpolate({\n          inputRange,\n          outputRange: this.outputRange(-(height - radius) / 2, index, count, samples),\n        }),\n      }],\n    };\n\n    return (\n      <View style={containerStyle} {...{ key: index }}>\n        <Animated.View style={topStyle} />\n        <Animated.View style={bottomStyle} />\n      </View>\n    );\n  }\n\n  render() {\n    let { style, ...props } = this.props;\n\n    return (\n      <Indicator\n        style={[styles.container, style]}\n        renderComponent={this.renderComponent}\n        {...props}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}